{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/AvatarPic/AvatarPic.module.css","components/Profile/ProfileInfo/UserStatus/ProfileStatus.module.css","components/Profile/AvatarPic/AvatarPic.tsx","components/Profile/ProfileInfo/UserStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","AvatarPic","profile","isOwner","savePhoto","Preloader","className","styles","_box","userCard","_photo","src","photos","large","userPicByDefault","type","onChange","e","target","files","length","lookingForAJob","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","_statusString","onDoubleClick","value","autoFocus","onBlur","updateStatus","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","onSubmit","_editModeBtn","styles2","formSummaryError","_username","createField","Input","_jobstatus","Textarea","_aboutuser","_contacts","Object","keys","contacts","map","key","ProfileInfo","saveProfile","_column","_initialsDataBox","formData","then","goToEditMode","_sepLine","_statusBox","ProfileData","onClick","fullName","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Profile","_containerGrid","wallpaper","_AvatarCol","_initialsCol","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","_ProfileColumn","React","Component","compose","connect","state","profilePage","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.17b94857.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"_ProfileColumn\":\"Profile__ProfileColumn__207do\",\"_containerGrid\":\"Profile__containerGrid__m6y40\",\"wallpaper\":\"Profile_wallpaper__1kfUj\",\"_AvatarCol\":\"Profile__AvatarCol__3yGF3\",\"_initialsCol\":\"Profile__initialsCol__3aINu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_column\":\"ProfileInfo__column__2Jw4M\",\"_username\":\"ProfileInfo__username__2WyWd\",\"_jobstatus\":\"ProfileInfo__jobstatus__3RcqS\",\"_aboutuser\":\"ProfileInfo__aboutuser__UOh8C\",\"_contacts\":\"ProfileInfo__contacts__1DsEd\",\"editModeBtn\":\"ProfileInfo_editModeBtn__7jc1j\",\"initialsDataForms\":\"ProfileInfo_initialsDataForms__1FBdT\",\"_sepLine\":\"ProfileInfo__sepLine__NSw8p\",\"_statusBox\":\"ProfileInfo__statusBox__1R_O8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_box\":\"AvatarPic__box__3nJNR\",\"_photo\":\"AvatarPic__photo__2sgTL\",\"userCard\":\"AvatarPic_userCard__2YPRD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_statusString\":\"ProfileStatus__statusString__1op0h\"};","import React, {ChangeEvent} from 'react';\r\nimport styles from './AvatarPic.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport userPicByDefault from '../../../img/svg/user-pic-default.svg';\r\nimport {ProfileType} from '../../../types/reduxTypes';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst AvatarPic: React.FC<PropsType> = ({profile, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n       return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"AvatarPic block\">\r\n            <div className={`${styles._box} ${styles.userCard}`}>\r\n                <img className={styles._photo}\r\n                     src={profile.photos.large || userPicByDefault}\r\n                />\r\n            </div>\r\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            {profile.lookingForAJob ? 'Yes': 'No'}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AvatarPic;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport styles from './ProfileStatus.module.css';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n       setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <span className={styles._statusString} onDoubleClick={activateEditMode}>\r\n                        {props.status || 'set status'}\r\n                </span>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport styles2 from '../../common/FormsControls/FormsControls.module.css';\r\nimport {ProfileType} from '../../../types/reduxTypes';\r\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className={styles._editModeBtn}>\r\n            <button>\r\n                save\r\n            </button>\r\n        </div>\r\n        { error && <div className={styles2.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div className={styles._username}>\r\n            <span>{createField<ProfileTypeKeys>(\"Full name\", 'fullName', [], Input)}</span>\r\n        </div>\r\n        <div className={styles._jobstatus}>\r\n            <span>Looking for a Job {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}</span>\r\n        </div>\r\n        {<div className={styles._jobstatus}>\r\n            <span>My professional skills:<br/>\r\n                {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </span>\r\n        </div>\r\n        }\r\n        <div className={styles._aboutuser}>\r\n            <span>About me:</span>\r\n            {createField<ProfileTypeKeys>('About Me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div className={styles._contacts}>\r\n                    <span>\r\n                      Contacts: {\r\n                        Object.keys(profile.contacts).map(key => {\r\n                            return <div className={styles._contacts} key={key}>\r\n                                {key}: {createField(key, 'contacts.' + key, [], Input)}\r\n                            </div>\r\n                        })\r\n                    }\r\n                    </span>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './UserStatus/ProfileStatusWithHooks';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport InitialsDataForm from './ProfileDataForm';\r\nimport {ContactsType, ProfileType} from '../../../types/reduxTypes';\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = ({status, updateStatus, profile, isOwner, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(()=>{\r\n                setEditMode(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"Initials block\">\r\n            <div className={styles._column}>\r\n                <div className={styles._initialsDataBox}>\r\n                    {\r\n                        editMode\r\n                        ? <InitialsDataForm profile={profile} onSubmit={onSubmit} />\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n                </div>\r\n                <hr className={styles._sepLine}/>\r\n                <div className={styles._statusBox}>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <>\r\n        {isOwner && <div className={styles._editModeBtn}>\r\n            <button onClick={goToEditMode}>\r\n                edit\r\n            </button>\r\n        </div>}\r\n        <div className={styles._username}>\r\n            <span>{profile.fullName}</span>\r\n        </div>\r\n        <div className={styles._jobstatus}>\r\n            <span>Looking for a Job: {profile.lookingForAJob ? 'Yes' : 'No'}</span>\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div className={styles._jobstatus}>\r\n            <span>My professional skills: {profile.lookingForAJobDescription}</span>\r\n        </div>\r\n        }\r\n        <div className={styles._aboutuser}>\r\n            <span>About me: {profile.aboutMe}</span>\r\n        </div>\r\n        <div className={styles._contacts}>\r\n                    <span>\r\n                      contacts: {\r\n                        Object.keys(profile.contacts).map((key) => {\r\n                            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                        })\r\n                    }\r\n                    </span>\r\n        </div>\r\n    </>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={styles._contacts}>\r\n        <span>{contactTitle}: {contactValue}</span>\r\n    </div>\r\n}","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport AvatarPic from './AvatarPic/AvatarPic';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ProfileType} from '../../types/reduxTypes';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"UserCard block\">\r\n            <div className={`${styles._containerGrid} ${styles.wallpaper}`}>\r\n                <div className={styles._AvatarCol}>\r\n                    <AvatarPic profile={props.profile} isOwner={props.isOwner} savePhoto={props.savePhoto}/>\r\n                </div>\r\n                <div className={styles._initialsCol}>\r\n                    <ProfileInfo profile={props.profile} isOwner={props.isOwner} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport styles from './Profile.module.css';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profileReducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {ProfileType} from '../../types/reduxTypes';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles._ProfileColumn}>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n) (ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}