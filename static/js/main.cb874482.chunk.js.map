{"version":3,"sources":["api/api.ts","Components/Dialogs/Dialogs.module.css","api/profile-api.ts","redux/profileReducer.ts","Components/Navigation/Navigation.module.css","redux/messagesReducer.ts","img/svg/doubleRingPreloader40.svg","Components/Header/Logo/Logo.module.css","img/svg/logotype.svg","Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","serviceWorker.js","redux/sidebarReducer.ts","utils/objectHelper.ts","api/users-api.ts","redux/usersReducer.ts","api/auth-api.ts","api/security-api.ts","redux/authReducer.ts","redux/appReducer.ts","redux/reduxStore.ts","Components/Navigation/Navigation.tsx","hoc/withSuspense.tsx","Components/common/Paginator/Paginator.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","redux/usersSelectors.ts","Components/Users/UsersContainer.tsx","Components/Login/Login.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Dialogs.tsx","Components/Header/Logo/Logo.jsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","App.tsx","index.tsx","Components/Users/Users.module.css","App.module.css","Components/common/Preloader/Preloader.tsx","Components/Dialogs/DialogItem/DialogItem.module.css","utils/validators/validators.ts","Components/common/Paginator/Paginator.module.css","img/jpg/avatar.jpg","Components/Header/Header.module.css","Components/common/Preloader/Preloader.module.css"],"names":["ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","module","exports","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","initialState","postData","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setStatus","deletePost","postId","setUserProfile","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogsData","name","messagesData","isSelf","sendMessage","newMessageBody","messagesReducer","body","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","_textareaCell","Input","_formStyles","createField","placeholder","validators","component","text","validate","_formMark","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","ObjPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","follow","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","count","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducers","combineReducers","profilePage","messagesPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navigation","_containerNav","_item","to","_itemLink","activeClassName","activeLink","_notifyCell","withSuspense","WrappedComponent","Suspense","fallback","Preloader","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","_pagePanel","onClick","el","cn","selectedPage","pageNumber","e","key","User","user","_usersBox1","_imgBox","_img","alt","src","small","avatarPic","_followBtnBox","disabled","some","_usersBox2","_personInfoBox1","_personInfoBox2","Users","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","pageTitle","React","Component","connect","bind","page","totalCount","LoginReduxForm","reduxForm","handleSubmit","onSubmit","required","undefined","imgCaptcha","styles2","formSummaryError","CaptchaIsRequired","length","DialogItem","_containerGrid","_avatarBox","dialogAva","_avatarImg","photo","usernameBox","Dialogs","dialogsElements","dialog","_container","_header","Logo","_homelink","href","Logosvg","Header","_wrapper","_loginBox","logout","HeaderContainer","UserCardContainer","lazy","MyPostsContainer","SuspendedChat","SuspendedUserCard","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","_LeftColumn","_UserCardColumn","path","render","_NarrowColumn","_WideColumn","AppContainer","withRouter","promise","all","PetfansSocialApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","_preloaderBox","preloader","_preloader","value","maxLengthCreator","max"],"mappings":"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","file":"static/js/main.cb874482.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { UserType } from '../types/reduxTypes';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {'API-KEY': '83ff2ca7-a319-4045-8f15-c83797dc9c95'},\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_container\":\"Dialogs__container__2Obrq\",\"_header\":\"Dialogs__header__2RHnB\"};","import {PhotosType, ProfileType} from '../types/reduxTypes';\r\nimport {instance, APIResponseType} from './api';\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status})\r\n            .then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put<APIResponseType<PhotosType>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile)\r\n            .then(res => res.data);\r\n    }\r\n}","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from '../types/reduxTypes';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {ResultCodesEnum} from '../api/api';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\n\r\nlet initialState = {\r\n    postData: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s, my first post', likesCount: 11},\r\n        {id: 3, message: 'Hi, какой-то пост', likesCount: 15},\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {id: 5, message: action.newPostText, likesCount: 0};\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost]\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        }\r\n        case 'SN/PROFILE/DELETE-POST':\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SAVE-PHOTO-SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET-STATUS', status} as const),\r\n    deletePost: (postId :number) => ({type: 'SN/PROFILE/DELETE-POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile: profile} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE-PHOTO-SUCCESS', photos} as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data));\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    let data = await profileAPI.saveProfile(profile);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(`UserId can't be null`)\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', {_error: data.messages[0]}));\r\n        return Promise.reject({_error: data.messages[0]})\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_containerNav\":\"Navigation__containerNav__1I857\",\"_item\":\"Navigation__item__253cH\",\"_itemLink\":\"Navigation__itemLink__X_Epa\",\"activeLink\":\"Navigation_activeLink__3W-mX\",\"_notifyCell\":\"Navigation__notifyCell__2EDKY\"};","import {InferActionsTypes} from './reduxStore';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n    isSelf: boolean\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Nikita'},\r\n        {id: 2, name: 'Vladimir'},\r\n        {id: 3, name: 'Misha'},\r\n        {id: 4, name: 'Sergey'},\r\n    ] as DialogType[],\r\n    messagesData: [\r\n        {id: 1, message: 'Hi', isSelf: false},\r\n        {id: 2, message: 'How is your it-kamasutra?', isSelf: true},\r\n        {id: 3, message: 'Yo', isSelf: false},\r\n        {id: 4, message: 'Hi', isSelf: true},\r\n        {id: 5, message: 'Hi', isSelf: false},\r\n        {id: 6, message: 'Hi', isSelf: true},\r\n        {id: 6, message: 'dfsdf', isSelf: false},\r\n        {id: 6, message: 'Hi', isSelf: true},\r\n    ] as MessageType[],\r\n};\r\n\r\nconst messagesReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SN/MESSAGES/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body, isSelf: true}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/MESSAGES/SEND_MESSAGE', newMessageBody} as const),\r\n}\r\n\r\n\r\nexport default messagesReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","module.exports = __webpack_public_path__ + \"static/media/doubleRingPreloader40.9b0765f6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_homelink\":\"Logo__homelink__2gj9f\"};","module.exports = __webpack_public_path__ + \"static/media/logotype.d56e57dd.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_error\":\"FormsControls__error__3la6o\",\"_textareaCell\":\"FormsControls__textareaCell__3ZBo1\",\"_formStyles\":\"FormsControls__formStyles__3LE5J\",\"_formMark\":\"FormsControls__formMark__3KT97\",\"_errorMsg\":\"FormsControls__errorMsg__16W7q\",\"formSummaryError\":\"FormsControls_formSummaryError__H_1ug\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport {FieldValidatorType} from '../../../utils/validators/validators';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps, WrappedFieldsProps} from 'redux-form';\r\nimport {LoginFormValuesType} from '../../Login/Login';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps} className={`${styles._textareaCell} ${meta.touched && meta.error ? styles._error : ''}`} />\r\n    </FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n    <input {...input} {...restProps} className={`${styles._formStyles} ${meta.touched && meta.error ? styles._error : ''}`} />\r\n    </FormControl>\r\n}\r\n\r\nexport function createField <FormKeysType extends string> (placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: FieldValidatorType[],\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/>\r\n            {text ? <span className={styles._formMark}>{text}</span>: null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state:{} = initialState, action: any) => {\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","export const updateObjectInArray = (items: any, itemId: any, ObjPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[ObjPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\n","import {GetItemsType, instance, APIResponseType,} from './api';\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n}","import {updateObjectInArray} from '../utils/objectHelper';\r\nimport {UserType} from '../types/reduxTypes';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\nimport {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/users-api';\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>,\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            };\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            };\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state,\r\n                users: action.users\r\n            };\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: UserType[]) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n};\r\nexport const _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                          userId: number,\r\n                                          apiMethod: any,\r\n                                          actionCreator: (userId: number) => ActionsType ) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n};\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from './api';\r\n\r\ntype MeResponseData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseData>>(`auth/me`)\r\n            .then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import {APIResponseType, instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data);\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from '../api/api';\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\n\r\nconst SET_USER_DATA = 'SN/AUTH/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    email: null as string | null,\r\n    userId: null as (number | null),\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null, // if null, then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (email: string | null, userId: number | null, login: string | null, isAuth: boolean) => {\r\n        return ({type: 'SN/AUTH/SET_USER_DATA', payload: {email, userId, login, isAuth}} as const);\r\n    },\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n        if(meData.resultCode === ResultCodesEnum.Success) {\r\n            let {email, id, login} = meData.data;\r\n            dispatch(actions.setAuthUserData(email, id, login, true));\r\n        }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if(data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            } else {\r\n                let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\r\n                dispatch(stopSubmit('login', {_error: message}));\r\n            }\r\n        }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n        if(data.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false));\r\n        }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./authReducer\";\r\nimport {InferActionsTypes} from './reduxStore';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/MAIN/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/MAIN/INITIALIZED_SUCCESS'} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(()=> {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from './profileReducer';\r\nimport messagesReducer from './messagesReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\nimport usersReducer from './usersReducer';\r\nimport authReducer from './authReducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers\r\nexport type AppStateType = ReturnType<RootReducersType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Navigation.module.css\";\r\n\r\n\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <nav className=\"Navigation block\">\r\n            <ul className={styles._containerNav}>\r\n                <li className={styles._item}>\r\n                    <NavLink to='/profile' className={styles._itemLink} activeClassName={styles.activeLink}><span>Profile</span></NavLink>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n                <li className={styles._item}>\r\n                    <NavLink to='/dialogs' className={styles._itemLink} activeClassName={styles.activeLink}><span>Messages</span></NavLink>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n                <li className={styles._item}>\r\n                    <NavLink to='/users' className={styles._itemLink} activeClassName={styles.activeLink}><span>Users</span></NavLink>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n                <li className={styles._item}>\r\n                    <a className={styles._itemLink}><span>News</span></a>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n                <li className={styles._item}>\r\n                    <a className={styles._itemLink}><span>Music</span></a>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n                <li className={styles._item}>\r\n                    <a className={styles._itemLink}><span>Settings</span></a>\r\n                    <div className={styles._notifyCell}><span>99</span></div>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport Preloader from \"../Components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    };\r\n}","import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n\r\n\r\n        <div className={styles._pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >Previus\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={(e) => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from './Users.module.css';\r\nimport avatarPic from '../../img/jpg/avatar.jpg';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from '../../types/reduxTypes';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    return (<div className=\"Users block\">\r\n            <div>\r\n                <div className={styles._usersBox1}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <div className={styles._imgBox}>\r\n                            <img className={styles._img} alt=\"faceAvatar\"\r\n                                 src={user.photos.small !== null ? user.photos.small : avatarPic}/>\r\n                        </div>\r\n                    </NavLink>\r\n                    <div className={styles._followBtnBox}>\r\n\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }\r\n                                      }>FOLLOW</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }\r\n                                      }>UNFOLLOW</button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={styles._usersBox2}>\r\n                    <div className={styles._personInfoBox1}>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div className={styles._personInfoBox2}>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React, { FC } from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from '../../types/reduxTypes';\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UserType[]\r\n    followingInProgress: number[]\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst Users: FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div className=\"Users block\">\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     follow={props.follow}\r\n                                     unfollow={props.unfollow}\r\n                                     key={u.id}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {createSelector} from 'reselect';\r\nimport {AppStateType} from './reduxStore';\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow,\r\n} from '../../redux/usersReducer';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getUsers,\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount\r\n} from \"../../redux/usersSelectors\";\r\nimport {UserType} from '../../types/reduxTypes';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {ReactComponent} from '*.svg';\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: UserType[]\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {getUsers, currentPage, pageSize} = this.props;\r\n        getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {getUsers, pageSize} = this.props;\r\n        getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            { this.props.isFetching ? <Preloader /> : null }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\n\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {follow, unfollow, getUsers: requestUsers}),\r\n) (UsersContainer)","import React from 'react';\r\nimport styles from './Login.module.css';\r\nimport styles2 from '../common/FormsControls/FormsControls.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from '../../redux/reduxStore';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormPropertiesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormPropertiesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormPropertiesTypeKeys>(undefined, 'rememberMe', [required], Input, {type: 'checkbox'}, 'Remember Me')}\r\n            {captchaUrl && <img src={captchaUrl} className={styles.imgCaptcha}/> }\r\n            {captchaUrl && createField<LoginFormPropertiesTypeKeys>('symbols from image', 'captcha', [required], Input, {}) }\r\n            { error && <div className={styles2.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button type={'submit'}>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'}) (LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    password: string\r\n    email: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormPropertiesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className=\"Login block\">\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./DialogItem.module.css\";\r\nimport photo from \"../../../img/jpg/avatar.jpg\";\r\nimport {DialogItemType} from '../Dialogs';\r\n\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    return (\r\n        <div className=\"DialogItem block\">\r\n            <NavLink to={\"/dialogs/\" + props.id} className={styles._containerGrid}>\r\n                <div className={`${styles._avatarBox} ${styles.dialogAva}`}>\r\n                    <img className={styles._avatarImg} src={photo}/>\r\n                </div>\r\n                <div className={styles.usernameBox}>\r\n                    <span><strong>{props.name}</strong></span>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nexport type DialogItemType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\ntype PropsType = {\r\n    dialogsData: DialogItemType[]\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let dialogsElements = props.dialogsData.map( dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>)\r\n\r\n    return (\r\n      <div className=\"Dialogs block\">\r\n          <div className={styles._container}>\r\n              <h6 className={styles._header}>Диалоги</h6>\r\n              {dialogsElements}\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport styles from './Logo.module.css';\r\nimport Logosvg from '../../../img/svg/logotype.svg';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"Logo block_inline\">\r\n            <a className={styles._homelink} href=\"#homelink\" id=\"homelink\">\r\n                <img src={Logosvg} alt=\"homelink\"/>\r\n                <span>Petfans</span>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport {NavLink, Route} from 'react-router-dom';\r\nimport Logo from \"./Logo/Logo\";\r\nimport styles from './Header.module.css';\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    return (\r\n        <header className={'Header block'}>\r\n            <div className={styles._wrapper}>\r\n                <div className={styles._container}>\r\n                    <Logo/>\r\n\r\n                    <div className={styles._loginBox}>\r\n                        {props.isAuth ? <div>{props.login} - <button onClick={props.logout}>Log Out</button></div> : <NavLink to={'/login'}>Login</NavLink>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {Props} from 'react';\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from '../../redux/reduxStore';\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n\r\n\r\n} as MapPropsType);\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    MapStateToProps,\r\n    {logout})(HeaderContainer);","import React from 'react';\nimport './App.css';\nimport styles from './App.module.css';\nimport {HashRouter, Redirect, Route, withRouter} from \"react-router-dom\";\nimport {connect, Provider} from 'react-redux';\nimport store, {AppStateType} from './redux/reduxStore';\nimport {compose} from 'redux';\nimport {initializeApp} from './redux/appReducer';\nimport Preloader from './Components/common/Preloader/Preloader';\nimport Navigation from './Components/Navigation/Navigation';\nimport {withSuspense} from './hoc/withSuspense';\nimport UsersContainer from './Components/Users/UsersContainer';\nimport LoginPage from './Components/Login/Login';\nimport Dialogs from './Components/Dialogs/Dialogs';\nimport HeaderContainer from './Components/Header/HeaderContainer';\n\nconst UserCardContainer = React.lazy(() => import('./Components/UserCard/UserCardContainer'));\nconst MyPostsContainer = React.lazy(() => import('./Components/MyPosts/MyPostsContainer'));\nconst ChatContainer = React.lazy(() => import('./Components/Chat/ChatContainer'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedChat = withSuspense(ChatContainer)\nconst SuspendedUserCard = withSuspense(UserCardContainer)\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('some error occured');\n        // console.error(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if(!this.props.initialized) {\n            return <Preloader />\n        }\n        return (\n            <div className={'App'}>\n                <HeaderContainer/>\n                <main className=\"Main block\">\n                    <div className={styles._wrapper}>\n                        <div className={styles._container}>\n                            <div className={styles._LeftColumn}>\n                                <Navigation/>\n                            </div>\n                            <div className={styles._UserCardColumn}>\n                                <Route path='/' render={()=> <Redirect to={'/profile'}/>} />\n                                <Route path='/profile/:userId?' render={()=> <SuspendedUserCard />}/>\n                                <Route path='/users' render={() => <UsersContainer pageTitle={'Самурай'}/>}/>\n                                <Route path='/login' render={() => <LoginPage/>}/>\n\n                            </div>\n                            <div className={styles._NarrowColumn}>\n                                <Route path='/dialogs' render={(props) => <Dialogs dialogsData={this.props.state.messagesPage.dialogsData}/>}\n                                />\n                            </div>\n                            <div className={styles._WideColumn}>\n                                <Route path='/dialogs'\n                                       render={ () => <SuspendedChat /> }/>\n                                <Route path='/profile' render={withSuspense(MyPostsContainer)}/>\n                            </div>\n                        </div>\n                    </div>\n                </main>\n            </div>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n    state: state\n});\n\nexport const AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})) (App);\n\nexport const PetfansSocialApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer />\n            </Provider>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport {PetfansSocialApp} from './App';\n\n    ReactDOM.render(<PetfansSocialApp />, document.getElementById('root'))\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_usersBox2\":\"Users__usersBox2__1BL88\",\"_imgBox\":\"Users__imgBox__Pn1Gj\",\"_img\":\"Users__img__2FJjK\",\"_pagePanel\":\"Users__pagePanel__2kZah\",\"_selectedPage\":\"Users__selectedPage__2kVPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_wrapper\":\"App__wrapper__2lJBG\",\"_container\":\"App__container__3O8_x\",\"_LeftColumn\":\"App__LeftColumn__jRzFF\",\"_UserCardColumn\":\"App__UserCardColumn__3iGqw\",\"_NarrowColumn\":\"App__NarrowColumn__aY88a\",\"_WideColumn\":\"App__WideColumn__153-O\"};","import React from 'react';\r\nimport styles from './Preloader.module.css';\r\nimport preloader from '../../../img/svg/doubleRingPreloader40.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div className={styles._preloaderBox}>\r\n            <img src={preloader} className={styles._preloader} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_containerGrid\":\"DialogItem__containerGrid__5zyqm\",\"active\":\"DialogItem_active__34APj\",\"_avatarBox\":\"DialogItem__avatarBox__eFuDK\",\"_avatarImg\":\"DialogItem__avatarImg__2NZdb\",\"dialogAva\":\"DialogItem_dialogAva__CYk0n\",\"usernameBox\":\"DialogItem_usernameBox__3Ad1Q\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string): string | undefined => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (max: number): FieldValidatorType => (value) => {\r\n    return value.length > max ? `Max length is ${max} symbols` : undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_pagePanel\":\"Paginator__pagePanel__2YcBW\",\"_selectedPage\":\"Paginator__selectedPage__3Hzi7\",\"paginator\":\"Paginator_paginator__ETtZo\",\"pageNumber\":\"Paginator_pageNumber__1b0sD\",\"selectedPage\":\"Paginator_selectedPage__1rABy\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.93a43109.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_wrapper\":\"Header__wrapper__1ZUa2\",\"_container\":\"Header__container__1y67T\",\"_loginBox\":\"Header__loginBox__KK7ad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_preloaderBox\":\"Preloader__preloaderBox__2mhvR\"};"],"sourceRoot":""}