{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessagesForm","props","messagesAnchorRef","useRef","messages","useState","isAutoScroll","SetIsAutoScroll","current","scrollIntoView","behavior","style","maxHeight","margin","overflowY","onScroll","e","diffHeight","currentTarget","scrollHeight","scrollTop","Math","abs","clientHeight","map","m","Message","key","id","ref","fontSize","React","memo","console","log","display","alignItems","width","backgroundColor","borderRadius","overflow","flexDirection","padding","photo","length","src","alt","userName","maxWidth","height","size","icon","message","inputingMsg","setInputingMsg","rows","onChange","value","disabled","block","type","onClick","sendMessage","ChatPage","gridColumn"],"mappings":"yOAwBMA,EAAiB,WACnB,IAAMC,EAAWC,cACXC,EAASC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UASzE,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAGC,6BACgB,UAAXN,GAAsB,wEACvB,kBAACO,EAAD,MACA,kBAACC,EAAD,QAKND,EAAyB,SAACE,GAC5B,IAAMC,EAAoBC,iBAAuB,MAC3CC,EAAWX,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,KAAKS,YAFlD,EAGEC,oBAAkB,GAHpB,mBAG/BC,EAH+B,KAGjBC,EAHiB,KAoBtC,OANAX,qBAAU,WACa,IAAD,EAAdU,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACN,IAGA,yBAAKO,MAAO,CAACC,UAAW,OAAQC,OAAQ,WAAYC,UAAW,QAASC,SAhBvD,SAACC,GAClB,IAAIC,EAAaD,EAAEE,cAAcC,aAAeH,EAAEE,cAAcE,UAC5DC,KAAKC,IAAIL,EAAaD,EAAEE,cAAcK,cAAgB,KACrDjB,GAAgBC,GAAgB,IAEhCD,GAAgBC,GAAgB,KAYhCH,EAASoB,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAD,CAASC,IAAKF,EAAEG,GAAIH,EAAGA,OAC1C,yBAAKI,IAAK3B,EAAmBS,MAAO,CAACmB,SAAU,IAA/C,UAKNJ,EAAiDK,IAAMC,MAAK,YAAU,IAAD,EAAPP,EAAO,EAAPA,EAEhE,OADAQ,QAAQC,IAAI,UAER,yBAAKvB,MAAO,CAACwB,QAAS,OAAQC,WAAY,WAAYC,MAAO,OAAQxB,OAAQ,WAAYyB,gBAAiB,OAAQC,aAAc,SAAUC,SAAU,WAChJ,yBAAK7B,MAAO,CAACwB,QAAS,OAAQM,cAAe,SAAUL,WAAY,aAAcC,MAAO,MAAOK,QAAS,kBAAmBJ,gBAAiB,UAAWE,SAAU,WAC7J,8BAEQ,UAAAf,EAAEkB,aAAF,eAASC,QACH,yBAAKC,IAAKpB,EAAEkB,MAAOG,IAAKrB,EAAEsB,SAAUpC,MAAO,CAACqC,SAAU,OAAQC,OAAQ,UACtE,kBAAC,IAAD,CAAQC,KAAK,QAAQC,KAAM,kBAAC,IAAD,SAGzC,yBAAKxC,MAAO,CAAC6B,SAAU,WACnB,2BACKf,EAAEsB,YAIf,yBAAKpC,MAAO,CAAC+B,QAAS,kBAAmBL,MAAO,MAAOG,SAAU,WAC7D,2BAAIf,EAAE2B,cAKhBpD,EAAgC,SAACC,GAAW,IAAD,EAEPI,mBAAS,IAFF,mBAEtCgD,EAFsC,KAEzBC,EAFyB,KAGvC9D,EAASC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UACnEF,EAAWC,cAUjB,OACI,6BACI,6BACI,kBAAC,IAAD,CAAUgE,KAAM,EAAGC,SAAU,SAACxC,GAAD,OAAOsC,EAAetC,EAAEE,cAAcuC,QAAQA,MAAOJ,KAEtF,6BACI,kBAAC,IAAD,CAAQK,SAAqB,UAAXlE,EAAoBmE,OAAK,EAACC,KAAM,UAAWC,QAd9C,WAClBR,IAGL/D,EAASwE,YAAYT,IACrBC,EAAe,OASP,WAMDS,UA3GY,WAEvB,OACI,yBAAKpD,MAAO,CAACqD,WAAY,eACrB,kBAAC3E,EAAD","file":"static/js/7.85b82060.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {Button} from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport {ChatMessageUnitAPIType, StatusType} from '../../api/chat-api';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    ChatMessageWithIdType,\r\n    sendMessage,\r\n    startMessagesListening,\r\n    stopMessagesListening\r\n} from '../../redux/chatReducer';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return(\r\n        <div style={{gridColumn: '3 / span 8'}}>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            {status === 'error' && <h3>Some error occured. Please, Refresh Page</h3>}\r\n            <Messages />\r\n            <AddMessagesForm />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC<{}> = (props) => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const messages = useSelector<AppStateType, ChatMessageWithIdType[]>(state => state.chat.messages)\r\n    const [isAutoScroll, SetIsAutoScroll] = useState<boolean>(false);\r\n\r\n    const scrollHandle = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let diffHeight = e.currentTarget.scrollHeight - e.currentTarget.scrollTop;\r\n        if (Math.abs(diffHeight - e.currentTarget.clientHeight) < 300) {\r\n            !isAutoScroll && SetIsAutoScroll(true)\r\n        } else {\r\n            !isAutoScroll && SetIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return(\r\n        <div style={{maxHeight: '50vh', margin: '1.6rem 0', overflowY: 'auto'}} onScroll={scrollHandle}>\r\n            {messages.map(m => <Message key={m.id} m={m} />)}\r\n            <div ref={messagesAnchorRef} style={{fontSize: 0}}>&nbsp;</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{m: ChatMessageUnitAPIType}> = React.memo(({m}) => {\r\n    console.log('render')\r\n    return (\r\n        <div style={{display: 'flex', alignItems: 'flex-end', width: '100%', margin: '1.6rem 0', backgroundColor: '#fff', borderRadius: '0.8rem', overflow: 'hidden'}}>\r\n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start', width: '20%', padding: '1.6rem 1.6rem 0', backgroundColor: '#87b5cc', overflow: 'hidden'}}>\r\n                <div>\r\n                    {\r\n                        m.photo?.length\r\n                            ? <img src={m.photo} alt={m.userName} style={{maxWidth: '4rem', height: 'auto',}}/>\r\n                            : <Avatar size=\"large\" icon={<UserOutlined/>}/>\r\n                    }\r\n                </div>\r\n                <div style={{overflow: 'hidden'}}>\r\n                    <p>\r\n                        {m.userName}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div style={{padding: '1.6rem 1.6rem 0', width: '80%', overflow: 'hidden'}}>\r\n                <p>{m.message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nconst AddMessagesForm: React.FC<{}> = (props) => {\r\n\r\n    const [inputingMsg, setInputingMsg] = useState('')\r\n    const status = useSelector<AppStateType, StatusType>(state => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickSendMessage = () => {\r\n        if (!inputingMsg) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(inputingMsg));\r\n        setInputingMsg('');\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                <TextArea rows={6} onChange={(e) => setInputingMsg(e.currentTarget.value)} value={inputingMsg} />\r\n            </div>\r\n            <div>\r\n                <Button disabled={status !== 'ready'} block type={'primary'} onClick={onClickSendMessage}>SEND</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage;"],"sourceRoot":""}