{"version":3,"sources":["components/Messages/Messages.module.css","components/Messages/AddMsgForm/AddMsgForm.tsx","hoc/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx","components/Messages/Messages.tsx"],"names":["module","exports","maxLength50","maxLengthCreator","reduxForm","form","props","className","styles","_containerGrid","onSubmit","handleSubmit","createField","required","Textarea","btnSendMsg","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","messagesPage","actions","WrappedComponent","restProps","to","message","messagesData","map","el","sender","isSelf","msgCont","_selfMsgCell","msgAva","_selfAvaCell","_userMsgCell","_userAvaCell","_avaImg","src","userpic","_container","_header","values","sendMessage","newMessageBody"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,WAAa,6BAA6B,QAAU,0BAA0B,eAAiB,iCAAiC,aAAe,+BAA+B,aAAe,+BAA+B,QAAU,0BAA0B,aAAe,+BAA+B,aAAe,iC,0ICMzUC,EAAcC,YAAiB,IAiBtBC,cAAgC,CAACC,KAAM,kBAAvCD,EAZqF,SAACE,GAEjG,OACI,0BAAMC,UAAWC,IAAOC,eAAgBC,SAAUJ,EAAMK,cACnDC,YAAsC,qBAAsB,iBAAkB,CAACC,IAAUX,GAAcY,KACxG,yBAAKP,UAAW,iBACZ,4BAAQA,UAAWC,IAAOO,YAA1B,a,yBCbZC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,YCSRE,sBACXC,aARkB,SAACJ,GACnB,MAAO,CACHK,aAAcL,EAAMK,gBAMjB,eAAsBC,ODA1B,SAAgCC,GAWnC,OAFqCH,YAA4DL,EAA4B,GAAxFK,EAPiC,SAACf,GAAW,IACzEY,EAAwBZ,EAAxBY,OAAWO,EAD6D,YAChDnB,EADgD,YAE7E,OAAKY,EAEE,kBAACM,EAAqBC,GAFT,kBAAC,IAAD,CAAUC,GAAG,iBCL1BN,ECA8B,SAACd,GAC1C,IAEIqB,EAFQrB,EAAMgB,aAEEM,aAAaC,KAAK,SAACC,GAEnC,IAAIC,EAASD,EAAGE,OAAU,CAACC,QAASzB,IAAO0B,aAAcC,OAAQ3B,IAAO4B,cAClE,CAACH,QAASzB,IAAO6B,aAAcF,OAAQ3B,IAAO8B,cAEpD,OACI,yBAAK/B,UAAWC,IAAOC,gBACnB,yBAAKF,UAAWwB,EAAOI,QACnB,yBAAK5B,UAAWC,IAAO+B,QAASC,IAAKC,OAEzC,yBAAKlC,UAAWwB,EAAOE,SACnB,8BAAOH,EAAGH,cAU1B,OACI,yBAAKpB,UAAU,cACX,yBAAKA,UAAWC,IAAOkC,YACnB,wBAAInC,UAAWC,IAAOmC,SAAtB,sBACChB,EACD,kBAAC,EAAD,CAAiBjB,SATT,SAACkC,GACjBtC,EAAMuC,YAAYD,EAAOE","file":"static/js/6.f4dc89e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"_container\":\"Messages__container__3ytoz\",\"_header\":\"Messages__header__1GQlx\",\"_containerGrid\":\"Messages__containerGrid__3mF2F\",\"_selfAvaCell\":\"Messages__selfAvaCell__30eT2\",\"_userAvaCell\":\"Messages__userAvaCell__24576\",\"_avaImg\":\"Messages__avaImg__1FvUv\",\"_userMsgCell\":\"Messages__userMsgCell__3fqw5\",\"_selfMsgCell\":\"Messages__selfMsgCell__1rH_t\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport styles from \"../Messages.module.css\";\r\nimport {NewMsgFormValuesType} from '../Messages';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMsgFormValuesKeysType = Extract<keyof NewMsgFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nexport const AddMsgForm: React.FC<InjectedFormProps<NewMsgFormValuesType, PropsType> & PropsType> = (props) => {\r\n\r\n    return (\r\n        <form className={styles._containerGrid} onSubmit={props.handleSubmit}>\r\n            {createField<NewMsgFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\r\n            <div className={\"btnSendMsgBox\"}>\r\n                <button className={styles.btnSendMsg}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMsgFormValuesType>({form: 'ChatAddMsgForm'}) (AddMsgForm);","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/reduxStore';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to='./login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {}) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {actions} from \"../../redux/messagesReducer\";\r\nimport {Messages} from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/reduxStore';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n) (Messages);","import React from \"react\";\r\nimport styles from \"./Messages.module.css\";\r\nimport userpic from \"../../img/jpg/avatar.jpg\";\r\nimport AddMsgFormRedux from \"./AddMsgForm/AddMsgForm\";\r\nimport { InitialStateType } from \"../../redux/messagesReducer\";\r\n\r\ntype PropsType = {\r\n    messagesPage: InitialStateType\r\n    sendMessage: (msgText: string) => void\r\n}\r\n\r\nexport type NewMsgFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Messages: React.FC<PropsType> = (props) => {\r\n    let state = props.messagesPage;\r\n\r\n    let message = state.messagesData.map( (el)=> {\r\n\r\n        let sender = el.isSelf ?  {msgCont: styles._selfMsgCell, msgAva: styles._selfAvaCell}\r\n            : {msgCont: styles._userMsgCell, msgAva: styles._userAvaCell};\r\n\r\n        return (\r\n            <div className={styles._containerGrid}>\r\n                <div className={sender.msgAva}>\r\n                    <img className={styles._avaImg} src={userpic}/>\r\n                </div>\r\n                <div className={sender.msgCont}>\r\n                    <span>{el.message}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    let addNewMessage = (values: NewMsgFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Chat block\">\r\n            <div className={styles._container}>\r\n                <h6 className={styles._header}>Чат</h6>\r\n                {message}\r\n                <AddMsgFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}