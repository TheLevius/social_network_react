{"version":3,"sources":["utils/validators/validators.ts","App.module.css","components/common/Paginator/Paginator.module.css","components/common/Preloader/Preloader.module.css","components/Login/Login.module.css","components/Dialogs/Dialogs.module.css","api/profile-api.ts","redux/profileReducer.ts","redux/messagesReducer.ts","api/api.ts","img/svg/user-pic-default.svg","img/jpg/avatar.jpg","api/chat-api.ts","redux/chatReducer.ts","img/svg/doubleRingPreloader40.svg","serviceWorker.js","redux/sidebarReducer.ts","utils/objectHelper.ts","api/users-api.ts","redux/usersReducer.ts","api/auth-api.ts","api/security-api.ts","redux/authReducer.ts","redux/appReducer.ts","redux/reduxStore.ts","hoc/withSuspense.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/usersSelectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","redux/authSelectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Users/Users.module.css","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/Dialogs/DialogItem/DialogItem.module.css"],"names":["required","value","undefined","maxLengthCreator","max","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","postData","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setStatus","deletePost","postId","setUserProfile","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogsData","name","messagesData","isSelf","sendMessage","newMessageBody","messagesReducer","body","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandle","e","newMessages","JSON","parse","console","log","forEach","s","openHandle","errorHandle","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessagesHandle","newMessagesHandleCreator","_statusChangedHandle","statusChangedHandleCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","i","array","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","ObjPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducers","combineReducers","profilePage","messagesPage","sidebar","usersPage","form","formReducer","chat","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","Preloader","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","_pagePanel","onClick","el","cn","selectedPage","pageNumber","key","User","user","_usersBox1","to","_imgBox","_img","alt","src","small","userPicByDefault","_followBtnBox","disabled","some","_usersBox2","_personInfoBox1","_personInfoBox2","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","component","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","query","pathname","UsersPage","_ProfileColumn","style","fontSize","lineHeight","color","pageTitle","LoginReduxForm","reduxForm","handleSubmit","createField","Input","imgCaptcha","styles2","formSummaryError","LoginPage","CaptchaIsRequired","DialogItem","_containerGrid","_avatarBox","dialogAva","_avatarImg","photo","usernameBox","Dialogs","dialogsElements","dialog","_container","_header","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","ProfileContainer","lazy","MyPostsContainer","MessagesContainer","ChatPage","SuspendedMessages","SuspendedProfile","SuspendedChatPage","Content","Menu","SubMenu","Footer","Sider","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","minHeight","_wrapper","path","render","exact","_NarrowColumn","_WideColumn","textAlign","Component","AppContainer","withRouter","connect","promise","all","PetfansSocialApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","_textareaCell","_formStyles","placeholder","validators","text","fieldCell","_formMark","_preloaderBox","preloader","_preloader"],"mappings":"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","file":"static/js/main.c9b8a263.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string): string | undefined => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (max: number): FieldValidatorType => (value) => {\r\n    return value.length > max ? `Max length is ${max} symbols` : undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_wrapper\":\"App__wrapper__2lJBG\",\"_container\":\"App__container__3O8_x\",\"_LeftColumn\":\"App__LeftColumn__jRzFF\",\"_ProfileColumn\":\"App__ProfileColumn__1YeRH\",\"_NarrowColumn\":\"App__NarrowColumn__aY88a\",\"_WideColumn\":\"App__WideColumn__153-O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_pagePanel\":\"Paginator__pagePanel__fmmnW\",\"_selectedPage\":\"Paginator__selectedPage__3bcfP\",\"paginator\":\"Paginator_paginator__34wEG\",\"pageNumber\":\"Paginator_pageNumber__30JFc\",\"selectedPage\":\"Paginator_selectedPage__2PEwU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_preloaderBox\":\"Preloader__preloaderBox__3-SYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_ProfileColumn\":\"Login__ProfileColumn__1s3YQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_container\":\"Dialogs__container__2v8e3\",\"_header\":\"Dialogs__header__GH20X\"};","import {PhotosType, ProfileType} from '../types/reduxTypes';\r\nimport {instance, APIResponseType} from './api';\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status})\r\n            .then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put<APIResponseType<PhotosType>>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile)\r\n            .then(res => res.data);\r\n    }\r\n}","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from '../types/reduxTypes';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {ResultCodesEnum} from '../api/api';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\n\r\nlet initialState = {\r\n    postData: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s, my first post', likesCount: 11},\r\n        {id: 3, message: 'Hi, какой-то пост', likesCount: 15},\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {id: 5, message: action.newPostText, likesCount: 0};\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost]\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        }\r\n        case 'SN/PROFILE/DELETE-POST':\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SAVE-PHOTO-SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET-STATUS', status} as const),\r\n    deletePost: (postId :number) => ({type: 'SN/PROFILE/DELETE-POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile: profile} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE-PHOTO-SUCCESS', photos} as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data));\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    let data = await profileAPI.saveProfile(profile);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(`UserId can't be null`)\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', {_error: data.messages[0]}));\r\n        return Promise.reject({_error: data.messages[0]})\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {InferActionsTypes} from './reduxStore';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n    isSelf: boolean\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Nikita'},\r\n        {id: 2, name: 'Vladimir'},\r\n        {id: 3, name: 'Misha'},\r\n        {id: 4, name: 'Sergey'},\r\n    ] as DialogType[],\r\n    messagesData: [\r\n        {id: 1, message: 'Hi', isSelf: false},\r\n        {id: 2, message: 'How is your it-kamasutra?', isSelf: true},\r\n        {id: 3, message: 'Yo', isSelf: false},\r\n        {id: 4, message: 'Hi', isSelf: true},\r\n        {id: 5, message: 'Hi', isSelf: false},\r\n        {id: 6, message: 'Hi', isSelf: true},\r\n        {id: 6, message: 'dfsdf', isSelf: false},\r\n        {id: 6, message: 'Hi', isSelf: true},\r\n    ] as MessageType[],\r\n};\r\n\r\nconst messagesReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SN/MESSAGES/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body, isSelf: true}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/MESSAGES/SEND_MESSAGE', newMessageBody} as const),\r\n}\r\n\r\n\r\nexport default messagesReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import axios from 'axios';\r\nimport { UserType } from '../types/reduxTypes';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {'API-KEY': '83ff2ca7-a319-4045-8f15-c83797dc9c95'},\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","module.exports = __webpack_public_path__ + \"static/media/user-pic-default.f112a5dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.93a43109.jpg\";","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\nlet ws: WebSocket | null = null;\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed';\r\n\r\nexport const closeHandler = ()=>{\r\n    notifySubscribersAboutStatus('pending');\r\n    setTimeout(()=>{createChannel()}, 5000);\r\n};\r\n\r\nexport const messageHandle = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data);\r\n    console.log('WE HAVE NEW MESSAGE');\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n\r\n};\r\nexport const openHandle = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nexport const errorHandle = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('refresh page')\r\n}\r\n\r\nexport const cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler);\r\n    ws?.removeEventListener('message', messageHandle);\r\n    ws?.removeEventListener('open', openHandle);\r\n    ws?.removeEventListener('error', errorHandle);\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status));\r\n}\r\n\r\nexport function createChannel() {\r\n    cleanUp();\r\n    ws?.close();\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandle)\r\n    ws.addEventListener('open', openHandle)\r\n    ws.addEventListener('error', errorHandle)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop(){\r\n        subscribers['messages-received'] = [];\r\n        subscribers['status-changed'] = [];\r\n        cleanUp();\r\n        ws?.close();\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageUnitAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageUnitAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error';","import {FormAction} from 'redux-form';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\nimport {chatAPI, ChatMessageUnitAPIType, StatusType} from '../api/chat-api';\r\nimport {Dispatch} from 'redux';\r\nimport {v1} from 'uuid';\r\n\r\nexport type ChatMessageWithIdType = ChatMessageUnitAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageWithIdType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CHAT/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [\r\n                    ...state.messages,\r\n                    ...action.payload.messages\r\n                        .map( (m) => ( {...m, id: v1()} ))\r\n                ].filter((m, i, array) => (\r\n                    i >= array.length - 100\r\n                ))\r\n            }\r\n         case 'SN/CHAT/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    messagesReceived: (messages: ChatMessageUnitAPIType[]) => {\r\n        return ({type: 'SN/CHAT/MESSAGES_RECEIVED', payload: {messages} } as const);\r\n    },\r\n    statusChanged: (status: StatusType) => {\r\n        return ({type: 'SN/CHAT/STATUS_CHANGED', payload: {status} } as const);\r\n    }\r\n\r\n}\r\n\r\nlet _newMessagesHandle: ( (messages: ChatMessageUnitAPIType[]) => void) | null = null;\r\nconst newMessagesHandleCreator = (dispatch: Dispatch) => {\r\n    if (_newMessagesHandle === null) {\r\n        _newMessagesHandle = (messages: ChatMessageUnitAPIType[]) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessagesHandle\r\n}\r\nlet _statusChangedHandle: ( (status: StatusType) => void) | null = null;\r\nconst statusChangedHandleCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandle === null) {\r\n        _statusChangedHandle = (status: StatusType) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandle\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessagesHandleCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandleCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessagesHandleCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandleCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/doubleRingPreloader40.9b0765f6.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state:{} = initialState, action: any) => {\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","export const updateObjectInArray = (items: any, itemId: any, ObjPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[ObjPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\n","import {GetItemsType, instance, APIResponseType,} from './api';\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: boolean | null = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}${term ? ('&term=' + term) : ''}${ friend === null ? '' : '&friend=' + friend}`)\r\n            .then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n}","import {updateObjectInArray} from '../utils/objectHelper';\r\nimport {UserType} from '../types/reduxTypes';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\nimport {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/users-api';\r\nimport {APIResponseType} from '../api/api';\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 80,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            };\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            };\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state,\r\n                users: action.users\r\n            };\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: UserType[]) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: {filter}} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n};\r\nexport const _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                          userId: number,\r\n                                          apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                          actionCreator: (userId: number) => ActionsType ) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n};\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from './api';\r\n\r\ntype MeResponseData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseData>>(`auth/me`)\r\n            .then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import {APIResponseType, instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data);\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from '../api/api';\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './reduxStore';\r\n\r\nconst SET_USER_DATA = 'SN/AUTH/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    email: null as string | null,\r\n    userId: null as (number | null),\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null, // if null, then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData: (email: string | null, userId: number | null, login: string | null, isAuth: boolean) => {\r\n        return ({type: 'SN/AUTH/SET_USER_DATA', payload: {email, userId, login, isAuth}} as const);\r\n    },\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n        if(meData.resultCode === ResultCodesEnum.Success) {\r\n            let {email, id, login} = meData.data;\r\n            dispatch(actions.setAuthUserData(email, id, login, true));\r\n        }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if(data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            } else {\r\n                let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\r\n                dispatch(stopSubmit('login', {_error: message}));\r\n            }\r\n        }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n        if(data.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false));\r\n        }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./authReducer\";\r\nimport {InferActionsTypes} from './reduxStore';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/MAIN/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/MAIN/INITIALIZED_SUCCESS'} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(()=> {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from './profileReducer';\r\nimport messagesReducer from './messagesReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\nimport usersReducer from './usersReducer';\r\nimport authReducer from './authReducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport chatReducer from './chatReducer';\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    chat: chatReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers\r\nexport type AppStateType = ReturnType<RootReducersType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    };\r\n}","import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize= 80, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n\r\n\r\n        <div className={styles._pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >Previus\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={(e) => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from './Users.module.css';\r\nimport userPicByDefault from '../../img/svg/user-pic-default.svg';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from '../../types/reduxTypes';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    return (<div className=\"Users block\">\r\n            <div>\r\n                <div className={styles._usersBox1}>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <div className={styles._imgBox}>\r\n                            <img className={styles._img} alt=\"faceAvatar\"\r\n                                 src={user.photos.small !== null ? user.photos.small : userPicByDefault}/>\r\n                        </div>\r\n                    </NavLink>\r\n                    <div className={styles._followBtnBox}>\r\n\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }\r\n                                      }>FOLLOW</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }\r\n                                      }>UNFOLLOW</button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={styles._usersBox2}>\r\n                    <div className={styles._personInfoBox1}>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div className={styles._personInfoBox2}>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import {createSelector} from 'reselect';\r\nimport {AppStateType} from './reduxStore';\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Field, Form, Formik} from 'formik';\r\nimport React from 'react';\r\nimport {FilterType} from '../../redux/usersReducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {getUsersFilter} from '../../redux/usersSelectors';\r\n\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true'\r\n        }\r\n        props.onFilterChanged(filter);\r\n        setTimeout(() => {\r\n            //alert(JSON.stringify(values));\r\n            setSubmitting(false);\r\n        }, 400);\r\n    };\r\n\r\n    // formik notes: component = as\r\n    return (\r\n        <div className={'searchFormBlock'}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n\r\n                        <Field type={'text'} name={'term'}/>\r\n\r\n                        <Field name={'friend'} component={'select'}>\r\n                            <option value={'null'}>All</option>\r\n                            <option value={'true'}>Only followed</option>\r\n                            <option value={'false'}>Only unfollowed</option>\r\n                        </Field>\r\n                        <button type='submit' disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React, {FC, useEffect} from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport {UsersSearchForm} from './UsersSearchForm';\r\nimport {FilterType, requestUsers} from '../../redux/usersReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/usersSelectors';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from 'querystring';\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = {\r\n    term?: string\r\n    friend?: string\r\n    page?: string\r\n};\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n        if (!!parsed.page) actualPage = +(parsed.page)\r\n\r\n        if (!!parsed.page) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        if (!!parsed.friend) {\r\n            actualFilter = {\r\n                ...actualFilter,\r\n                friend: parsed.friend === 'null'\r\n                    ? null\r\n                    : parsed.friend === 'true'\r\n            }\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) {query.term = filter.term}\r\n        if(filter.friend !== null) {query.friend = String(filter.friend)}\r\n        if(currentPage !== 1) {query.page = String(currentPage)}\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage]);\r\n\r\n    return <div className=\"Users block\">\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}/>\r\n        <UsersSearchForm\r\n            onFilterChanged={onFilterChanged}\r\n        />\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     follow={follow}\r\n                                     unfollow={unfollow}\r\n                                     key={u.id}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching,\r\n} from '../../redux/usersSelectors';\r\nimport styles from './Users.module.css';\r\n\r\ntype UserPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UserPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (<div className={styles._ProfileColumn}>\r\n        <h2 style={{\r\n            fontSize: '3.2rem',\r\n            lineHeight: '2',\r\n            color: '#1a8ccb'\r\n        }}>{props.pageTitle}</h2>\r\n        { isFetching ? <Preloader /> : null }\r\n        <Users />\r\n    </div>)\r\n}","import React from 'react';\r\nimport styles from './Login.module.css';\r\nimport styles2 from '../common/FormsControls/FormsControls.module.css';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login} from '../../redux/authReducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormPropertiesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormPropertiesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormPropertiesTypeKeys>(undefined, 'rememberMe', [required], Input, {type: 'checkbox'}, 'Remember Me')}\r\n            {captchaUrl && <img src={captchaUrl} className={styles.imgCaptcha}/> }\r\n            {captchaUrl && createField<LoginFormPropertiesTypeKeys>('symbols from image', 'captcha', [required], Input, {}) }\r\n            { error && <div className={styles2.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button type={'submit'}>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'}) (LoginForm);\r\n\r\nexport type LoginFormValuesType = {\r\n    password: string\r\n    email: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormPropertiesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = (props) => {\r\n    const dispatch = useDispatch();\r\n    const captchaUrl = useSelector<AppStateType, string | null>(state => state.auth.captchaUrl);\r\n    const isAuth = useSelector<AppStateType, boolean>( state => state.auth.isAuth);\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return(\r\n        <div className={styles._ProfileColumn}>\r\n        <div className=\"Login block\">\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./DialogItem.module.css\";\r\nimport photo from \"../../../img/jpg/avatar.jpg\";\r\nimport {DialogItemType} from '../Dialogs';\r\n\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    return (\r\n        <div className=\"DialogItem block\">\r\n            <NavLink to={\"/dialogs/\" + props.id} className={styles._containerGrid}>\r\n                <div className={`${styles._avatarBox} ${styles.dialogAva}`}>\r\n                    <img className={styles._avatarImg} src={photo}/>\r\n                </div>\r\n                <div className={styles.usernameBox}>\r\n                    <span><strong>{props.name}</strong></span>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nexport type DialogItemType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\ntype PropsType = {\r\n    dialogsData: DialogItemType[]\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let dialogsElements = props.dialogsData.map( dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>)\r\n\r\n    return (\r\n      <div className=\"Dialogs block\">\r\n          <div className={styles._container}>\r\n              <h6 className={styles._header}>Диалоги</h6>\r\n              {dialogsElements}\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import {AppStateType} from './reduxStore';\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Row from 'antd/lib/grid/row';\r\nimport Col from 'antd/lib/grid/col';\r\nimport Avatar from 'antd/lib/avatar';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {Layout} from 'antd';\r\nimport {logout} from '../../redux/authReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Menu from 'antd/lib/menu';\r\nimport Button from 'antd/lib/button';\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/authSelectors';\r\n\r\ntype PropsType = {}\r\n\r\nexport const Header: React.FC<PropsType> = props => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout\r\n\r\n    return (\r\n        <Header >\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={2}>\r\n                            <Avatar alt={login || ''} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>\r\n                    </Col>}\r\n\r\n            </Row>\r\n\r\n        </Header>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport styles from './App.module.css';\nimport 'antd/dist/antd.css';\nimport {HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport {connect, Provider} from 'react-redux';\nimport store, {AppStateType} from './redux/reduxStore';\nimport {compose} from 'redux';\nimport {initializeApp} from './redux/appReducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport {withSuspense} from './hoc/withSuspense';\nimport {UsersPage} from './components/Users/UsersContainer';\nimport {LoginPage} from './components/Login/Login';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport {Breadcrumb, Button, Layout, Menu} from 'antd';\nimport {Header} from './components/Header/Header';\n\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst MyPostsContainer = React.lazy(() => import('./components/MyPosts/MyPostsContainer'));\nconst MessagesContainer = React.lazy(() => import('./components/Messages/MessagesContainer'));\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedMessages = withSuspense(MessagesContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage);\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('some error occured');\n        // console.error(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if(!this.props.initialized) {\n            return <Preloader />\n        }\n\n        return (\n            <>\n                <Layout>\n                    <Header/>\n                    <Content style={{ padding: '0 50px' }}>\n                        <Breadcrumb style={{ margin: '16px 0' }}>\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\n                        </Breadcrumb>\n                        <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n                            <Sider className=\"site-layout-background\" width={200}>\n                                <Menu\n                                    mode=\"inline\"\n                                    defaultSelectedKeys={['1']}\n                                    // defaultOpenKeys={['sub1']}\n                                    style={{ height: '100%' }}\n                                >\n                                        <Menu.Item key=\"1\"><Link to='/profile'><span>Profile</span></Link></Menu.Item>\n                                        <Menu.Item key=\"2\"><Link to='/dialogs'><span>Messages</span></Link></Menu.Item>\n                                        <Menu.Item key=\"5\"><Link to='/developers'><span>Developers</span></Link></Menu.Item>\n                                        <Menu.Item key=\"9\"><Link to='/chat'><span>Chat</span></Link></Menu.Item>\n                                </Menu>\n                            </Sider>\n                            <Content style={{ padding: '0 24px', minHeight: 280 }}>\n                                <main className=\"Main block\">\n                                    <div className={styles._wrapper}>\n                                        <div className={styles._container}>\n\n                                            <Route path='/profile' render={withSuspense(MyPostsContainer)}/>\n                                            <Switch>\n                                                <Route path='/' exact render={() => <Redirect to={'/profile'}/>}/>\n\n                                                <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\n                                                <Route path='/developers' render={() => <UsersPage pageTitle={'Самураи: '}/>}/>\n                                                <Route path='/login' render={() => <LoginPage/>}/>\n                                                <Route path='/dialogs' render={(props) => (<>\n                                                    <div className={styles._NarrowColumn}>\n                                                        <Dialogs dialogsData={this.props.state.messagesPage.dialogsData}/>\n                                                    </div>\n                                                    <div className={styles._WideColumn}>\n                                                        <SuspendedMessages/>\n                                                    </div>\n                                                </>)}/>\n                                                <Route path={'/chat'} render={() =>(<SuspendedChatPage/>)} />\n                                                <Route path={'*'} render={()=>(\n                                                    <div>\n                                                        404 Page not Found\n                                                        <Button type={'primary'}>PUSH</Button>\n                                                    </div>\n                                                )} />\n                                            </Switch>\n                                        </div>\n                                    </div>\n                                </main>\n                            </Content>\n                        </Layout>\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>Petfans social network © 2021</Footer>\n                </Layout>\n\n            <div className={'App'}>\n\n\n            </div>\n        </>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n    state: state\n});\n\nexport const AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})) (App);\n\nexport const PetfansSocialApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer />\n            </Provider>\n        </HashRouter>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport {PetfansSocialApp} from './App';\n\n    ReactDOM.render(<PetfansSocialApp />, document.getElementById('root'))\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_error\":\"FormsControls__error__1krlG\",\"fieldCell\":\"FormsControls_fieldCell__1Su5l\",\"formControl\":\"FormsControls_formControl__208tL\",\"_textareaCell\":\"FormsControls__textareaCell__2NJb6\",\"_formStyles\":\"FormsControls__formStyles__1AoUN\",\"_formMark\":\"FormsControls__formMark__2sBnG\",\"_errorMsg\":\"FormsControls__errorMsg__27fFg\",\"formSummaryError\":\"FormsControls_formSummaryError__2EGa1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_usersBox2\":\"Users__usersBox2__1JOKh\",\"_imgBox\":\"Users__imgBox__3je-w\",\"_img\":\"Users__img__1gFo9\",\"_pagePanel\":\"Users__pagePanel__3mzHv\",\"_selectedPage\":\"Users__selectedPage__3c3Rc\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport {FieldValidatorType} from '../../../utils/validators/validators';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return(\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            {children}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps} className={`${styles._textareaCell} ${meta.touched && meta.error ? styles._error : ''}`} />\r\n    </FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n    <input {...input} {...restProps} className={`${styles._formStyles} ${meta.touched && meta.error ? styles._error : ''}`} />\r\n    </FormControl>\r\n}\r\n\r\nexport function createField <FormKeysType extends string> (placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: FieldValidatorType[],\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') {\r\n    return (\r\n        <div className={styles.fieldCell}>\r\n            <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/>\r\n            {text ? <span className={styles._formMark}>{text}</span>: null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>","import React from 'react';\r\nimport styles from './Preloader.module.css';\r\nimport preloader from '../../../img/svg/doubleRingPreloader40.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n        <div className={styles._preloaderBox}>\r\n            <img src={preloader} className={styles._preloader} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_containerGrid\":\"DialogItem__containerGrid__1jDFm\",\"active\":\"DialogItem_active__2esoH\",\"_avatarBox\":\"DialogItem__avatarBox__SPL-B\",\"_avatarImg\":\"DialogItem__avatarImg__3E1aZ\",\"dialogAva\":\"DialogItem_dialogAva__1RYf2\",\"usernameBox\":\"DialogItem_usernameBox__1fuUk\"};"],"sourceRoot":""}