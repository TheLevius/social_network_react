{"version":3,"sources":["Components/Main/Chat/Chat.module.css","Components/Main/Chat/AddMsgForm/AddMsgForm.jsx","Components/Main/Chat/Chat.jsx","hoc/withAuthRedirect.js","Components/Main/Chat/ChatContainer.jsx"],"names":["module","exports","maxLength50","maxLengthCreator","reduxForm","form","props","className","styles","_containerGrid","onSubmit","handleSubmit","msgInputBox","Field","component","Textarea","name","placeholder","validate","required","btnSendMsgBox","btnSendMsg","Chat","message","messagesPage","messagesData","map","el","sender","isSelf","msgCont","_selfMsgCell","msgAva","_selfAvaCell","_userMsgCell","_userAvaCell","_avaImg","src","userpic","isAuth","_container","_header","values","sendMessage","newMsgBody","to","mapStateToPropsForRedirect","state","auth","compose","connect","dispatch","newMessageBody","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,WAAa,yBAAyB,QAAU,sBAAsB,eAAiB,6BAA6B,aAAe,2BAA2B,aAAe,2BAA2B,QAAU,sBAAsB,aAAe,2BAA2B,aAAe,6B,iJCK7SC,EAAcC,YAAiB,IAgBtBC,cAAU,CAACC,KAAM,kBAAjBD,EAdW,SAACE,GAEvB,OACI,0BAAMC,UAAWC,IAAOC,eAAgBC,SAAUJ,EAAMK,cACpD,yBAAKJ,UAAWC,IAAOI,aACnB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,aAAcC,YAAa,qBAAsBC,SAAU,CAACC,IAAUjB,MAE5G,yBAAKK,UAAWC,IAAOY,eACnB,4BAAQb,UAAWC,IAAOa,YAA1B,aC2BDC,EArCF,SAAChB,GACV,IAEIiB,EAFQjB,EAAMkB,aAEEC,aAAaC,KAAK,SAACC,GAEnC,IAAIC,EAASD,EAAGE,OAAU,CAACC,QAAStB,IAAOuB,aAAcC,OAAQxB,IAAOyB,cAClE,CAACH,QAAStB,IAAO0B,aAAcF,OAAQxB,IAAO2B,cAEpD,OACI,yBAAK5B,UAAWC,IAAOC,gBACnB,yBAAKF,UAAWqB,EAAOI,QACnB,yBAAKzB,UAAWC,IAAO4B,QAASC,IAAKC,OAEzC,yBAAK/B,UAAWqB,EAAOE,SACnB,8BAAOH,EAAGJ,cAU1B,OAAIjB,EAAMiC,OAGN,yBAAKhC,UAAU,cACX,yBAAKA,UAAWC,IAAOgC,YACnB,wBAAIjC,UAAWC,IAAOiC,SAAtB,sBACClB,EACD,kBAAC,EAAD,CAAiBb,SAXb,SAACgC,GACbpC,EAAMqC,YAAYD,EAAOE,iBAGJ,kBAAC,IAAD,CAAUC,GAAI,Y,wCC1BvCC,EAA6B,SAACC,GAAD,MAAY,CACzCR,OAAQQ,EAAMC,KAAKT,S,OCkBRU,sBACXC,aAhBkB,SAACH,GACnB,MAAO,CACHvB,aAAcuB,EAAMvB,iBAKH,SAAC2B,GACtB,MAAO,CACHR,YAAa,SAACS,GACVD,EAASE,YAAmBD,UDVR,SAACE,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKlD,MAAMiC,OACT,kBAACe,EAAcE,KAAKlD,OADI,kBAAC,IAAD,CAAUuC,GAAG,gBAHT,GACXY,IAAMH,WAStC,OAFqCJ,YAAQJ,EAARI,CAAqCK,KCO/DN,CAGZ3B","file":"static/js/5.2a34828c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"_container\":\"Chat__container__3wIQ1\",\"_header\":\"Chat__header__ubSM8\",\"_containerGrid\":\"Chat__containerGrid__3Jl2y\",\"_selfAvaCell\":\"Chat__selfAvaCell__1Bh4w\",\"_userAvaCell\":\"Chat__userAvaCell__giSDu\",\"_avaImg\":\"Chat__avaImg__2dO44\",\"_userMsgCell\":\"Chat__userMsgCell__2WT5Z\",\"_selfMsgCell\":\"Chat__selfMsgCell__2YjxY\"};","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required, maxLengthCreator} from \"../../../../utils/validators/validators\";\r\nimport styles from \"../Chat.module.css\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMsgForm = (props) => {\r\n\r\n    return (\r\n        <form className={styles._containerGrid} onSubmit={props.handleSubmit}>\r\n            <div className={styles.msgInputBox}>\r\n                <Field component={Textarea} name={'newMsgBody'} placeholder={'Enter your message'} validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div className={styles.btnSendMsgBox}>\r\n                <button className={styles.btnSendMsg}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'ChatAddMsgForm'}) (AddMsgForm);","import React from \"react\";\r\nimport styles from \"./Chat.module.css\";\r\nimport userpic from \"./../../../img/jpg/avatar.jpg\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMsgFormRedux from \"./AddMsgForm/AddMsgForm\";\r\n\r\nconst Chat = (props) => {\r\n    let state = props.messagesPage;\r\n\r\n    let message = state.messagesData.map( (el)=> {\r\n\r\n        let sender = el.isSelf ?  {msgCont: styles._selfMsgCell, msgAva: styles._selfAvaCell}\r\n            : {msgCont: styles._userMsgCell, msgAva: styles._userAvaCell};\r\n\r\n        return (\r\n            <div className={styles._containerGrid}>\r\n                <div className={sender.msgAva}>\r\n                    <img className={styles._avaImg} src={userpic}/>\r\n                </div>\r\n                <div className={sender.msgCont}>\r\n                    <span>{el.message}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    let addNewMsg = (values) => {\r\n        props.sendMessage(values.newMsgBody);\r\n    };\r\n\r\n    if(!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return (\r\n        <div className=\"Chat block\">\r\n            <div className={styles._container}>\r\n                <h6 className={styles._header}>Чат</h6>\r\n                {message}\r\n                <AddMsgFormRedux onSubmit={addNewMsg}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='./login' />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {sendMessageCreator} from \"./../../../redux/messagesReducer\";\r\nimport Chat from \"./Chat\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Chat);"],"sourceRoot":""}